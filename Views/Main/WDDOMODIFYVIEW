FIRST_TIME	Importing	WDY_BOOLEAN
VIEW	Importing	IF_WD_VIEW

METHOD wddomodifyview .

  DATA lv_apprv_butt TYPE wd_this->element_context-apprv_butt.
    DATA lo_el_context TYPE REF TO if_wd_context_element.
    DATA ls_context TYPE wd_this->element_context.
    DATA lv_tab TYPE wd_this->element_context-tab.

*   get element via lead selection
    lo_el_context = wd_context->get_element( ).
*   @TODO handle not set lead selection
    IF lo_el_context IS INITIAL.
    ENDIF.

*   get single attribute
    lo_el_context->get_attribute(
      EXPORTING
        name =  `TAB`
      IMPORTING
        value = lv_tab ).

    IF lv_tab eq '2'.
        DATA lo_nd_leave_req TYPE REF TO if_wd_context_node.

        DATA lo_el_leave_req TYPE REF TO if_wd_context_element.
        DATA ls_leave_req TYPE wd_this->element_leave_req.

*       navigate from <CONTEXT> to <LEAVE_REQ> via lead selection
        lo_nd_leave_req = wd_context->get_child_node( name = wd_this->wdctx_leave_req ).

*       @TODO handle non existant child
*       IF lo_nd_leave_req IS INITIAL.
*       ENDIF.

*       get element via lead selection
        lo_el_leave_req = lo_nd_leave_req->get_element( ).
*       @TODO handle not set lead selection
        IF lo_el_leave_req IS INITIAL.
        ENDIF.

*       get all declared attributes
        lo_el_leave_req->get_static_attributes(
          IMPORTING
            static_attributes = ls_leave_req ).
      DATA lo_nd_action TYPE REF TO if_wd_context_node.

      DATA lo_el_action TYPE REF TO if_wd_context_element.
      DATA ls_action TYPE wd_this->element_action.
      DATA lv_visible TYPE wd_this->element_action-visible.

*     navigate from <CONTEXT> to <ACTION> via lead selection
      lo_nd_action = wd_context->get_child_node( name = wd_this->wdctx_action ).

*     @TODO handle non existant child
*     IF lo_nd_action IS INITIAL.
*     ENDIF.

*     get element via lead selection
      lo_el_action = lo_nd_action->get_element( ).

*     @TODO handle not set lead selection
      IF lo_el_action IS INITIAL.
      ENDIF.

IF ls_leave_req-status(6) eq 'Delete' or ls_leave_req-status eq 'Mark For Deletion' ..
*   @TODO fill attribute
   lv_apprv_butt = abap_false.

*   set single attribute
    lo_el_context->set_attribute(
      name =  `APPRV_BUTT`
      value = lv_apprv_butt ).

ELSEIF ls_leave_req-status(8) eq 'Modified'.
*   @TODO fill attribute
   lv_apprv_butt = abap_false.

*   set single attribute
    lo_el_context->set_attribute(
      name =  `APPRV_BUTT`
      value = lv_apprv_butt ).



*     @TODO fill attribute
     lv_visible = abap_false.

*     set single attribute
      lo_el_action->set_attribute(
        name =  `VISIBLE`
        value = lv_visible ).


ELSE.


*    DATA lo_el_context TYPE REF TO if_wd_context_element.
*    DATA ls_context TYPE wd_this->element_context.
    DATA lv_is_edit TYPE wd_this->element_context-is_edit.

*   get element via lead selection
    lo_el_context = wd_context->get_element( ).
*   @TODO handle not set lead selection
    IF lo_el_context IS INITIAL.
    ENDIF.

*   get single attribute
    lo_el_context->get_attribute(
      EXPORTING
        name =  `IS_EDIT`
      IMPORTING
        value = lv_is_edit ).

if lv_is_edit IS INITIAL.
IF ls_leave_req-status IS NOT INITIAL.

   lv_apprv_butt = abap_true.

*   set single attribute
    lo_el_context->set_attribute(
      name =  `APPRV_BUTT`
      value = lv_apprv_butt ).


*     @TODO fill attribute
     lv_visible = abap_true.

*     set single attribute
      lo_el_action->set_attribute(
        name =  `VISIBLE`
        value = lv_visible ).
ENDIF.
ENDIF.
ENDIF.

    ENDIF.

* DATA lv_visible TYPE wd_this->element_context-visible.
*  DATA : lt_leave TYPE TABLE OF zthcm_leavereq,
*         lx_leave TYPE zthcm_leavereq,
*         ld_pernr TYPE pernr_d,
*         ld_begda TYPE dats,
*         ld_endda TYPE dats,
*         ld_usrid TYPE p0105-usrid.
*  DATA ls_zthcm_erpskm_att TYPE zthcm_erpskm_att.
*  DATA lv_attachment(50).
*  DATA ld_message   TYPE string.
*  DATA ld_binary_content TYPE xstring.
*
*  DATA lo_componentcontroller TYPE REF TO ig_componentcontroller .
*  DATA lv_return TYPE boolean.
*  DATA lo_nd_input TYPE REF TO if_wd_context_node.
*  DATA lo_el_input TYPE REF TO if_wd_context_element.
*  DATA ls_input TYPE wd_this->element_input.
*  DATA lv_pernr TYPE wd_this->element_input-pernr.
*  DATA lv_cname TYPE emnam.
*  DATA lo_nd_leave_req TYPE REF TO if_wd_context_node.
*  DATA ls_leave_req TYPE wd_this->element_leave_req.
*  DATA lt_leave_req TYPE wd_this->elements_leave_req.
*  DATA lo_nd_node_attr TYPE REF TO if_wd_context_node.
*  DATA lo_el_node_attr TYPE REF TO if_wd_context_element.
*  DATA ls_node_attr TYPE wd_this->element_node_attr.
*  DATA lv_visible_admin TYPE wd_this->element_node_attr-visible_admin.
*
*  lo_componentcontroller = wd_this->get_componentcontroller_ctr( ).
*  lv_return = lo_componentcontroller->check_admin( ).
*
*  lo_nd_input = wd_context->get_child_node( name = wd_this->wdctx_input ).
*  lo_el_input = lo_nd_input->get_element( ).
*
*  IF lv_return = abap_true. " If user id Admin
*    lo_el_input->get_attribute( EXPORTING name =  `PERNR` IMPORTING value = ld_pernr ).
*    lv_visible_admin = abap_true.
*  ELSE.
*    ld_usrid = sy-uname.
*    CALL FUNCTION 'RP_GET_PERNR_FROM_USERID'
*      EXPORTING
*        begda     = sy-datum
*        endda     = sy-datum
*        usrid     = ld_usrid
*        usrty     = '0001'
*      IMPORTING
*        usr_pernr = ld_pernr
*      EXCEPTIONS
*        retcd     = 1
*        OTHERS    = 2.
*    lv_visible_admin = abap_false.
*  ENDIF.
**
*  CALL FUNCTION 'HR_TMW_GET_EMPLOYEE_NAME'
*    EXPORTING
*      person_no = ld_pernr
*    IMPORTING
*      edit_name = lv_cname.
*
** Set visble for toolbar in main table
*  lo_nd_node_attr = wd_context->get_child_node( name = wd_this->wdctx_node_attr ).
*  lo_el_node_attr = lo_nd_node_attr->get_element( ).
*  lo_el_node_attr->set_attribute( name =  `VISIBLE_ADMIN` value = lv_visible_admin ).
**  lo_el_node_attr->set_attribute( name =  `VISIBLE_ADMIN` value = 'X' ).
*  lo_el_input->set_attribute( name =  `CNAME` value = lv_cname ).
*
*
***  ld_pernr = '80000009'.
**  ld_begda = '18000101'.
**  ld_endda = '99991231'.
***  CALL FUNCTION 'HR_PSBUFFER_INITIALIZE'.
***  CALL FUNCTION 'HR_READ_INFOTYPE'
***    EXPORTING
***      infty           = '9000'
***      pernr           = ld_pernr
***      begda           = ld_begda
***      endda           = ld_endda
***    TABLES
***      infty_tab       = lt_leave
***    EXCEPTIONS
***      infty_not_found = 1.
*
*  SELECT * FROM ZTHCM_LEAVEREQ INTO TABLE lt_leave WHERE status NE ' '.
*
*  SORT lt_leave DESCENDING BY begda.
*
*  DATA: lv_index TYPE i,
*        lo_action TYPE REF TO if_wd_action,
*        lo_delegat TYPE REF TO cl_wdr_delegating_view.
*
*
*  lo_nd_leave_req = wd_context->get_child_node( name = wd_this->wdctx_leave_req ).
**  lo_nd_list_mcu->invalidate( ).
*  lo_nd_leave_req->get_static_attributes_table( IMPORTING table = lt_leave_req ).
*  REFRESH : lt_leave_req.
**
*  DATA lv_ext(20).
*
*  LOOP AT lt_leave INTO lx_leave.
*    CLEAR ls_leave_req.
*    MOVE-CORRESPONDING lx_leave TO ls_leave_req.
*    ls_leave_req-ename = lx_leave-approver1.
*    ls_leave_req-awart = lx_leave-awart.
*    ls_leave_req-atext = lx_leave-leave_type.
*    ls_leave_req-abstd = lx_leave-abstd.
*    ls_leave_req-abwtg = lx_leave-abwtg.
*    APPEND ls_leave_req TO lt_leave_req.
*
*    CLEAR : ls_leave_req.
*  ENDLOOP.
*
*  DATA lo_nd_action TYPE REF TO if_wd_context_node.
*  DATA lo_el_action TYPE REF TO if_wd_context_element.
*  DATA ls_action TYPE wd_this->element_action.
*  DATA lv_id TYPE wd_this->element_action-id.
*
*  lo_nd_action = wd_context->get_child_node( name = wd_this->wdctx_action ).
*  lo_el_action = lo_nd_action->get_element( ).
*  lo_el_action->get_attribute(
*    EXPORTING
*      name =  `ID`
*    IMPORTING
*      value = lv_id ).
*
*  IF first_time = 'X' OR lv_id IS NOT INITIAL.
*    lo_nd_leave_req = wd_context->get_child_node( name = wd_this->wdctx_leave_req ).
**    lo_nd_leave_req->bind_table( new_items = lt_leave_req set_initial_elements = abap_true ).
*    CLEAR lv_id.
*    lo_el_action->set_attribute( EXPORTING name =  `ID` value = lv_id ).
*  ENDIF.
**--------------------------------------------------------------------*
*  DATA lo_nd_header TYPE REF TO if_wd_context_node.
*  DATA lo_el_header TYPE REF TO if_wd_context_element.
*  DATA ls_header TYPE wd_this->element_header.
**  DATA lv_pernr TYPE wd_this->element_header-pernr.
*
*  lo_nd_header = wd_context->get_child_node( name = wd_this->wdctx_header ).
*  lo_el_header = lo_nd_header->get_element( ).
*
**  lv_pernr = ld_pernr.
** set single attribute
*  lo_el_header->set_attribute( name =  `PERNR` value = ld_pernr ).
**--------------------------------------------------------------------*
*
**  DATA lo_nd_leave_req TYPE REF TO if_wd_context_node.
**
*  DATA lo_el_leave_req TYPE REF TO if_wd_context_element.
**  DATA ls_leave_req TYPE wd_this->element_leave_req.
*
** navigate from <CONTEXT> to <LEAVE_REQ> via lead selection
*  lo_nd_leave_req = wd_context->get_child_node( name = wd_this->wdctx_leave_req ).
*
** @TODO handle non existant child
** IF lo_nd_leave_req IS INITIAL.
** ENDIF.
*
** get element via lead selection
*  lo_el_leave_req = lo_nd_leave_req->get_element( ).
** @TODO handle not set lead selection
*  IF lo_el_leave_req IS INITIAL.
*  ENDIF.
*
** get all declared attributes
*  lo_el_leave_req->get_static_attributes(
*    IMPORTING
*      static_attributes = ls_leave_req ).
*
*    DATA lo_el_context TYPE REF TO if_wd_context_element.
*    DATA ls_context TYPE wd_this->element_context.
*    DATA lv_apprv_butt TYPE wd_this->element_context-apprv_butt.
*
**   get element via lead selection
*    lo_el_context = wd_context->get_element( ).
*
**   @TODO handle not set lead selection
*    IF lo_el_context IS INITIAL.
*    ENDIF.
*
*IF ls_leave_req-status(6) eq 'Delete'.
**   @TODO fill attribute
*   lv_apprv_butt = abap_false.
*
**   set single attribute
*    lo_el_context->set_attribute(
*      name =  `APPRV_BUTT`
*      value = lv_apprv_butt ).
*ELSE.
*
*   lv_apprv_butt = abap_true.
*
**   set single attribute
*    lo_el_context->set_attribute(
*      name =  `APPRV_BUTT`
*      value = lv_apprv_butt ).
*
*ENDIF.
*
*DATA : ls_note TYPE ztb_guidnote.
*  DATA : ld_note TYPE ZDE_NOTE.
*  SELECT SINGLE * FROM ztb_guidnote INTO CORRESPONDING FIELDS OF ls_note
*    WHERE guid = ls_leave_req-guid.
*  IF sy-subrc eq 0.
*    ld_note = ls_note-note.
*  ELSE.
*    CLEAR ld_note.
*  ENDIF.
*
*
**    DATA lo_el_context TYPE REF TO if_wd_context_element.
**    DATA ls_context TYPE wd_this->element_context.
*    DATA lv_notes TYPE wd_this->element_context-notes.
*
**   get element via lead selection
*    lo_el_context = wd_context->get_element( ).
*
**   @TODO handle not set lead selection
*    IF lo_el_context IS INITIAL.
*    ENDIF.
*
**   @TODO fill attribute
*   lv_notes = ld_note.
*
**   set single attribute
*    lo_el_context->set_attribute(
*      name =  `NOTES`
*      value = lv_notes ).
*
*
*
*
*data: mime_repository type ref to if_mr_api,
*
*url type string value '/SAP/BC/WEBDYNPRO/SAP/Z_ADOBE/TEST.PDF',
*
*content type xstring,
*lt_att TYPE TABLE OF zthcm_erpskm_att,
*lx_att TYPE zthcm_erpskm_att.
*
*SELECT SINGLE * FROM zthcm_erpskm_att INTO CORRESPONDING FIELDS OF lx_att
*  WHERE zguid = ls_leave_req-guid.
*
**CHECK lx_att-zfladd_attch IS NOT INITIAL.
*if lx_att-zfladd_attch IS NOT INITIAL.
*url = lx_att-zfladd_attch.
*
**  DATA lo_el_context TYPE REF TO if_wd_context_element.
**  DATA ls_context TYPE wd_this->element_context.
*  DATA lv_pdf TYPE wd_this->element_context-pdf.
*
** get element via lead selection
*  lo_el_context = wd_context->get_element( ).
*
** @TODO handle not set lead selection
*  IF lo_el_context IS INITIAL.
*  ENDIF.
*
** @TODO fill attribute
*DATA :gv_file TYPE xstring,
*      flag.
*CLEAR flag.
*open DATASET lx_att-zfladd_attch FOR INPUT in BINARY MODE.
*IF sy-subrc eq 0.
*read DATASET lx_att-zfladd_attch INTO gv_file.
*ELSE.
*  flag = 'X'.
*ENDIF.
*CLOSE DATASET lx_att-zfladd_attch.
* lv_pdf = gv_file.
*
*IF flag IS NOT INITIAL.
* CLEAR lv_pdf.
*ENDIF.
** set single attribute
*  lo_el_context->set_attribute(
*    name =  `PDF`
*    value = lv_pdf ).
*
**01  None
**02  Visible
*     lv_visible = '02'.
*    lo_el_context->set_attribute(
*      name =  `VISISBLE2`
*      value = lv_visible ).
******************************************************************************
*    DATA lv_filecontent TYPE wd_this->element_attachment-filecontent.
*  DATA : lr_ess_webdynpro TYPE REF TO zcl_ess_webdynpro,
*         lr_node          TYPE REF TO if_wd_context_node,
*         lr_element       TYPE REF TO if_wd_context_element,
*         ld_pure_filename TYPE string.
*
*  DATA lv_file_name TYPE char200.
**  DATA lv_ext TYPE char10.
*  DATA lo_nd_attachment TYPE REF TO if_wd_context_node.
*  DATA lo_el_attachment TYPE REF TO if_wd_context_element.
*  DATA ls_attachment TYPE wd_this->element_attachment.
*
** navigate from <CONTEXT> to <ATTACHMENT> via lead selection
*  lo_nd_attachment = wd_context->get_child_node( name = wd_this->wdctx_attachment ).
*
*
** get element via lead selection
*  lo_el_attachment = lo_nd_attachment->get_element( ).
*
** @TODO handle not set lead selection
*  IF lo_el_attachment IS INITIAL.
*  ENDIF.
*
** @TODO fill attribute
* lv_filecontent = gv_file.
*
** set single attribute
*  lo_el_attachment->set_attribute(
*    name =  `FILECONTENT`
*    value = lv_filecontent ).
*
*  lo_el_attachment->set_attribute(
*    name =  `FILETYPE`
*    value = 'PDF' ).
***************************************************************************
*     lo_nd_attachment = wd_context->get_child_node( name = wd_this->wdctx_attachment ).
*
*
**    get element via lead selection
*     lo_el_attachment = lo_nd_attachment->get_element( ).
*
**    @TODO handle not set lead selection
*     IF lo_el_attachment IS INITIAL.
*     ENDIF.
*
**    @TODO fill static attributes
*    ls_attachment-filecontent    = gv_file.
*    ls_attachment-filename       = LX_ATT-zflnam_attch.
*    ls_attachment-filetype       = LX_ATT-zfiletype_attch.
*    ls_attachment-pure_filename  = LX_ATT-zflnam_attch.
*
**    set all declared attributes
*     lo_el_attachment->set_static_attributes(
*        static_attributes = ls_attachment ).
*
*
*DATA : LX_ZTBNOTE TYPE ZTB_GUIDNOTE.
*SELECT SINGLE * FROM ZTB_GUIDNOTE INTO lx_ztbnote WHERE
*  GUID = ls_leave_req-GUID.
*    DATA lv_note TYPE wd_this->element_leave_req-note.
*
**   navigate from <CONTEXT> to <LEAVE_REQ> via lead selection
*    lo_nd_leave_req = wd_context->get_child_node( name = wd_this->wdctx_leave_req ).
*
*
**   get element via lead selection
*    lo_el_leave_req = lo_nd_leave_req->get_element( ).
*
**   @TODO handle not set lead selection
*    IF lo_el_leave_req IS INITIAL.
*    ENDIF.
*
**   @TODO fill attribute
*   lv_note = lx_ztbnote-note.
*
**   set single attribute
*    lo_el_leave_req->set_attribute(
*      name =  `NOTE`
*      value = lv_note ).
******************************************************************************
*    ENDIF.

*me->refresh_tab2( )..

ENDMETHOD.
