WDEVENT	CL_WD_CUSTOM_EVENT

METHOD onactionpreview .

  DATA : lr_ess_webdynpro TYPE REF TO zcl_ess_webdynpro,
         lr_node          TYPE REF TO if_wd_context_node,
         lr_element       TYPE REF TO if_wd_context_element,
         ld_pure_filename TYPE string.

  DATA lv_file_name TYPE char200.
  DATA lv_ext TYPE char10.
  DATA lo_nd_attachment TYPE REF TO if_wd_context_node.
  DATA lo_el_attachment TYPE REF TO if_wd_context_element.
  DATA ls_attachment TYPE wd_this->element_attachment.

  wd_this->d_subaction = 'UPLOAD'.

  CREATE OBJECT lr_ess_webdynpro.
  " Get Attachment Node
  lr_node = wd_context->get_child_node( name = wd_this->wdctx_attachment ).

  " Set Download File
  CALL METHOD lr_ess_webdynpro->get_pure_filename(
    EXPORTING
      ir_node          = lr_node
    IMPORTING
      ev_pure_filename = ld_pure_filename ).

* Get extension file type " add by Riono 06.06.2016
  lv_file_name = ld_pure_filename.
  CALL FUNCTION 'TRINT_FILE_GET_EXTENSION'
    EXPORTING
      filename  = lv_file_name "ld_pure_filename
*     UPPERCASE = 'X'
    IMPORTING
      extension = lv_ext.

  lo_nd_attachment = wd_context->get_child_node( name = wd_this->wdctx_attachment ).
  lo_el_attachment = lo_nd_attachment->get_element( ).

  lo_el_attachment->get_static_attributes( IMPORTING static_attributes = ls_attachment ).

  ls_attachment-filetype = lv_ext.
  ls_attachment-pure_filename = ld_pure_filename.
  lo_el_attachment->set_static_attributes( static_attributes = ls_attachment ).

  CHECK ld_pure_filename IS NOT INITIAL.
  lr_node = wd_context->get_child_node( name = wd_this->wdctx_element ).
  lr_element = lr_node->get_element( ).
  lr_element->set_attribute( name = 'VISIBLE_DELETE' value = abap_true ).



    DATA lo_nd_leave_req TYPE REF TO if_wd_context_node.

    DATA lo_el_leave_req TYPE REF TO if_wd_context_element.
    DATA ls_leave_req TYPE wd_this->element_leave_req.

*   navigate from <CONTEXT> to <LEAVE_REQ> via lead selection
    lo_nd_leave_req = wd_context->get_child_node( name = wd_this->wdctx_leave_req ).

*   @TODO handle non existant child
*   IF lo_nd_leave_req IS INITIAL.
*   ENDIF.

*   get element via lead selection
    lo_el_leave_req = lo_nd_leave_req->get_element( ).
*   @TODO handle not set lead selection
    IF lo_el_leave_req IS INITIAL.
    ENDIF.

*   get all declared attributes
    lo_el_leave_req->get_static_attributes(
      IMPORTING
        static_attributes = ls_leave_req ).

     DATA: lx_att TYPE zthcm_erpskm_att,
      lt_att TYPE TABLE OF zthcm_erpskm_att.

     DATA lo_nd_guid TYPE REF TO if_wd_context_node.

     DATA lo_el_guid TYPE REF TO if_wd_context_element.
     DATA ls_guid TYPE wd_this->element_guid.

*    navigate from <CONTEXT> to <GUID> via lead selection
     lo_nd_guid = wd_context->get_child_node( name = wd_this->wdctx_guid ).

*    @TODO handle non existant child
*    IF lo_nd_guid IS INITIAL.
*    ENDIF.

*    get element via lead selection
     lo_el_guid = lo_nd_guid->get_element( ).
*    @TODO handle not set lead selection
     IF lo_el_guid IS INITIAL.
     ENDIF.

*    get all declared attributes
     lo_el_guid->get_static_attributes(
         IMPORTING
           static_attributes = ls_guid ).

     IF ls_guid IS INITIAL.
      CALL FUNCTION 'GUID_CREATE'
      IMPORTING
        ev_guid_32 = LS_GUID-LD_GUID.

*      lo_el_guid->set_static_attributes( EXPORTING
*         static_attributes = LS_GUID-LD_GUID ).


***************
*        DATA lo_nd_guid TYPE REF TO if_wd_context_node.
*
*        DATA lo_el_guid TYPE REF TO if_wd_context_element.
*        DATA ls_guid TYPE wd_this->element_guid.

*       navigate from <CONTEXT> to <GUID> via lead selection
        lo_nd_guid = wd_context->get_child_node( name = wd_this->wdctx_guid ).

*       @TODO handle non existant child
*       IF lo_nd_guid IS INITIAL.
*       ENDIF.

*       get element via lead selection
        lo_el_guid = lo_nd_guid->get_element( ).

*       @TODO handle not set lead selection
        IF lo_el_guid IS INITIAL.
        ENDIF.

*       @TODO fill static attributes
       ls_guid = LS_GUID.
*       ls_guid = xxx->get_yyy( ).

*       set all declared attributes
        lo_el_guid->set_static_attributes(
           static_attributes = ls_guid ).


***************
     ENDIF.

     lx_att-zpernr             =  ls_leave_req-pernr .
     lx_att-zinfty             =  '2001' .
     lx_att-zsubty             =  ls_leave_req-awart .
     lx_att-zbegda             =  ls_leave_req-begda .
     lx_att-zendda             =  '99991231' .
     lx_att-zguid              =  LS_GUID-LD_GUID .
     lx_att-zfltyp_attch       =  'DIR'.

     DATA : name TYPE c LENGTH 17.
     name = LS_ATTACHMENT-pure_filename.
     if name co space.
     REPLACE ALL OCCURRENCES OF space in name WITH '_'.
     ENDIF.

     CONCATENATE ls_leave_req-pernr '_' sy-datum sy-uzeit '_' name INTO lx_att-zflnam_attch.
*     lx_att-zflnam_attch       =  '' .
     lx_att-zfiletype_attch    =  LS_ATTACHMENT-FILETYPE .
     CONCATENATE '/ERPHCMSKM/IT2001/' lx_att-zflnam_attch INTO lx_att-zfladd_attch.
*     CONCATENATE '/ERPHCMSKM/IT2001/' lx_att-zflnam_attch INTO lx_att-zfladd_attch.
*     lx_att-zfladd_attch       =  '' .
     lx_att-zdatum             =  ls_leave_req-begda.
     lx_att-zuzeit             =  sy-uzeit .
     INSERT zthcm_erpskm_att FROM lx_att.

     IF sy-subrc eq 0.
       COMMIT WORK.

       OPEN DATASET LX_ATT-ZFLADD_ATTCH  IN BINARY MODE FOR OUTPUT.
*       OPEN DATASET LX_ATT-ZFLADD_ATTCH  FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
*       OPEN DATASET LX_ATT-ZFLADD_ATTCH  FOR OUTPUT IN TEXT MODE ENCODING UTF-8.
       TRANSFER LS_ATTACHMENT-FILECONTENT to LX_ATT-ZFLADD_ATTCH .
       CLOSE DATASET LX_ATT-ZFLADD_ATTCH.
     ENDIF.

ENDMETHOD.
